schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Condition {
  text: String!
  appliedAtRound: Int!
  appliedAtSeconds: Int!
  url: String
}

type Creature {
  name: String!
  initiative: Int
  healthPoints: Int
  maxHealthPoints: Int
  id: Int!
  alive: Boolean!
  conditions: [Condition!]
  notes: [Condition!]
  locked: Boolean!
}

type Battle {
  battleId: String!
  creatureCount: Int!
  round: Int!
  creatures: [Creature!]
  activeCreature: Int
  focusedCreature: Int
}

input ConditionInput {
  text: String!
  appliedAtRound: Int!
  appliedAtSeconds: Int!
  url: String
}

input CreatureInput {
  name: String!
  initiative: Int
  healthPoints: Int
  maxHealthPoints: Int
  id: Int!
  alive: Boolean!
  conditions: [ConditionInput!]
  notes: [ConditionInput!]
  locked: Boolean!
}

input BattleInput {
  battleId: String!
  creatureCount: Int!
  round: Int!
  creatures: [CreatureInput!]
  activeCreature: Int
  focusedCreature: Int
  expdate: Int!
}

type DndbattletrackerConnection {
  items: [Battle]
  nextToken: String
}

type Mutation {
  createDndbattletracker(input: BattleInput!): Battle
  deleteDndbattletracker(battleId: String!): Battle
  updateDndbattletracker(input: BattleInput!): Battle
}

type Query {
  getDndbattletracker(battleId: String!): Battle
  listDndbattletrackers(filter: TableDndbattletrackerFilterInput, limit: Int, nextToken: String): DndbattletrackerConnection
}

type Subscription {
  onCreateDndbattletracker(battleId: String): Battle @aws_subscribe(mutations : ["createDndbattletracker"])
  onDeleteDndbattletracker(battleId: String): Battle @aws_subscribe(mutations : ["deleteDndbattletracker"])
  onUpdateDndbattletracker(battleId: String): Battle @aws_subscribe(mutations : ["updateDndbattletracker"])
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableDndbattletrackerFilterInput {
  battleId: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}
